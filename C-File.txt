// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Mr_Printer

//@version=5
strategy(title='CrypStick', shorttitle='CrypStick', pyramiding = 4, process_orders_on_close = true, use_bar_magnifier = true, overlay = true, initial_capital = 100000, default_qty_type = strategy.percent_of_equity, default_qty_value = 100, overlay=false)

toggleBreaks  = input(true, title = "Show Breaks" )
leftBars  = input(15, title = "Left Bars")
rightBars  = input(15, title = "Right Bars")
volumeThresh  = input(20, title = "Volume Threshold")

highUsePivot = ta.pivothigh(close,leftBars, rightBars)[1]
lowUsePivot = ta.pivotlow(close,leftBars, rightBars)[1]

var float lastHighPivot = na
var float lastLowPivot = na


if not na(highUsePivot)
    lastHighPivot := highUsePivot
if not na(lowUsePivot)
    lastLowPivot := lowUsePivot


r1 = plot(lastHighPivot, color=ta.change(lastHighPivot) ? na : #FF0000,  linewidth=2, title="Resistance")
s1 = plot(lastLowPivot, color=ta.change(lastLowPivot) ? na : #233dee,  linewidth=2, title="Support")


//Volume %
shortE = input(3,title='SHORT EMA')
longE = input(6,title='LONG EMA')
short = ta.ema(volume, shortE)
long = ta.ema(volume, longE)
osc = 100 * ((short - long) / long)
osc2 = 100 * ((long - short) / short)

inLong = strategy.position_size > 0
inShort = strategy.position_size < 0

trailStopPercent = input.float(0.22, title="Trailing Stop Percent", minval=0.01, step=0.01) / 100
profitThresh = input.float(0.11, 'Profit Thresh', minval=0.01, step=0.01)/100.0


var float highestPriceSinceEntry = na
var float lowestPriceSinceEntry = na
var float trailingStopPrice = na


if inLong
    if close > highestPriceSinceEntry
        highestPriceSinceEntry := close
    trailingStopPrice := highestPriceSinceEntry * (1 - trailStopPercent)

if inShort
    if close < lowestPriceSinceEntry
        lowestPriceSinceEntry := close
    trailingStopPrice := lowestPriceSinceEntry * (1 + trailStopPercent)




// lowerTimeframeTooltip = "The indicator scans lower timeframe data to approximate Up/Down volume. By default, the timeframe is chosen automatically. These inputs override this with a custom timeframe.
//  \n\nHigher timeframes provide more historical data, but the data will be less precise."
// useCustomTimeframeInput = input.bool(false, "Use custom timeframe", tooltip = lowerTimeframeTooltip)
// lowerTimeframeInput = input.timeframe("1", "Timeframe")

// upAndDownVolume() =>
//     posVol = 0.0
//     negVol = 0.0
    
//     switch
//         close >  open     => posVol += volume
//         close <  open     => negVol -= volume
//         close >= close[1] => posVol += volume
//         close <  close[1] => negVol -= volume

//     [posVol, negVol]

// lowerTimeframe = switch
//     useCustomTimeframeInput => lowerTimeframeInput
//     timeframe.isseconds     => "1S"
//     timeframe.isintraday    => "1"
//     timeframe.isdaily       => "5"
//     => "60"

// [upVolumeArray, downVolumeArray] = request.security_lower_tf(syminfo.tickerid, lowerTimeframe, upAndDownVolume())

// upVolume = array.sum(upVolumeArray)
// downVolume = array.sum(downVolumeArray)
// delta = upVolume + downVolume
// plotchar(upVolume, "Up Volume",'')
// plotchar(downVolume, "Down Volume", '')
// plotchar(delta, "delta", "")
// plotchar(volume, "volume", "")

testR = ta.mfi(close,21)

shortCondition = ta.crossunder(close,lastLowPivot) and not (open - close < high - open) and osc > volumeThresh
longCondition = ta.crossover(close,lastHighPivot) and not (open - low > close - open) and osc > volumeThresh 

plotshape(series=longCondition, title="Buy Signal", text='BUY', style=shape.labelup, location=location.belowbar, color=#4bc033, textcolor=color.white, transp=0, size=size.tiny)
plotshape(series=shortCondition, title="Sell Signal", text='SELL', style=shape.labeldown, location=location.abovebar, color=#ff0062, textcolor=color.white, transp=0, size=size.tiny)

profitTargetTicks = math.round(profitThresh * strategy.position_avg_price / syminfo.mintick)

if longCondition 
    highestPriceSinceEntry := close
    strategy.entry("LONG", strategy.long)

if shortCondition 
    lowestPriceSinceEntry := close
    strategy.entry("SHORT", strategy.short)


if inShort
    strategy.exit("exitSHORT", from_entry="SHORT", stop=trailingStopPrice, profit = profitTargetTicks)
if inLong
    strategy.exit("exitLONG", from_entry="LONG", stop=trailingStopPrice, profit = profitTargetTicks)